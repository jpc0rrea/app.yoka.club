// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refreshToken      String? @map("refresh_token")
    accessToken       String? @map("access_token")
    expiresAt         Int?    @map("expires_at")
    tokenType         String? @map("token_type")
    scope             String?
    idToken           String? @map("id_token")
    sessionState      String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

enum UserRole {
    ADMIN
    INSTRUCTOR
    USER
}

model User {
    id               String    @id @default(cuid())
    name             String
    displayName      String
    email            String    @unique
    emailVerified    DateTime? @map("email_verified")
    image            String?
    password         String?
    username         String    @unique
    role             UserRole  @default(USER)
    checkInsQuantity Int       @default(1) @map("check_ins_quantity")

    accounts   Account[]
    sessions   Session[]
    events     Event[]
    checkIns   CheckIn[]
    payments   Payment[]
    statements Statement[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Event {
    id                  String    @id @default(cuid())
    title               String
    duration            Int
    isLive              Boolean   @map("is_live")
    checkInsMaxQuantity Int?      @map("check_ins_max_quantity")
    startDate           DateTime? @map("start_date")
    recordedUrl         String?   @map("recorded_url")
    liveUrl             String?   @map("live_url")
    createdAt           DateTime  @default(now()) @map("created_at")
    updatedAt           DateTime  @updatedAt @map("updated_at")
    instructorId        String    @map("instructor_id")

    instructor User      @relation(fields: [instructorId], references: [id], onDelete: Cascade)
    checkIns   CheckIn[]

    @@map("events")
}

model CheckIn {
    id        String   @id @default(cuid())
    userId    String   @map("user_id")
    eventId   String   @map("event_id")
    createdAt DateTime @default(now()) @map("created_at")

    user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    event     Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
    Statement Statement[]

    @@unique([userId, eventId])
    @@map("check_ins")
}

model Statement {
    id               String        @id @default(uuid())
    userId           String
    paymentId        String?       @map("payment_id")
    checkInId        String?       @map("check_in_id")
    title            String
    description      String
    type             StatementType
    checkInsQuantity Int           @map("check_ins_quantity")
    createdAt        DateTime      @default(now())
    updatedAt        DateTime      @updatedAt

    user    User     @relation(fields: [userId], references: [id])
    payment Payment? @relation(fields: [paymentId], references: [id])
    checkIn CheckIn? @relation(fields: [checkInId], references: [id], onDelete: SetNull)

    @@map("statements")
}

enum StatementType {
    DEBIT
    CREDIT
}

model Payment {
    id         String          @id @default(uuid())
    userId     String
    planId     Int?
    externalId String          @unique
    platform   PaymentPlatform
    method     PaymentMethod
    grossValue Int
    netValue   Int
    fee        Int
    currency   String
    createdAt  DateTime        @default(now())
    updatedAt  DateTime        @default(now()) @updatedAt

    user      User        @relation(fields: [userId], references: [id])
    plan      Plan?       @relation(fields: [planId], references: [id])
    Statement Statement[]

    @@map("payments")
}

enum PaymentMethod {
    PIX
    CREDIT_CARD
}

enum PaymentPlatform {
    STRIPE
    MERCADO_PAGO
}

model Plan {
    id               Int              @id @default(autoincrement())
    checkInsQuantity Int              @map("check_ins_quantity")
    price            Int
    currency         String
    recurrencePeriod RecurrencePeriod @map("recurrence_period")
    isActive         Boolean          @default(true) @map("is_active")
    createdAt        DateTime         @default(now()) @map("created_at")
    updatedAt        DateTime         @updatedAt @map("updated_at")

    payments Payment[]

    @@map("plans")
}

enum RecurrencePeriod {
    MONTHLY
    TRIMESTERLY
    YEARLY
}
