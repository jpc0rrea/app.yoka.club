// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expiresAt    DateTime @map("expires_at")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

enum UserRole {
    ADMIN
    INSTRUCTOR
    USER
}

enum CheckInTypes {
    PAID
    FREE
    TRIAL
}

model User {
    id                    String    @id @default(cuid())
    name                  String
    displayName           String
    email                 String    @unique
    isUserActivated       Boolean   @default(false) @map("is_user_activated")
    imageUrl              String?   @map("image_url")
    password              String
    username              String    @unique
    bio                   String?
    phoneNumber           String    @map("phone_number")
    role                  UserRole  @default(USER)
    checkInsQuantity      Int       @default(0) @map("check_ins_quantity")
    paidCheckInsQuantity  Int       @default(0) @map("paid_check_ins_quantity")
    freeCheckInsQuantity  Int       @default(0) @map("free_check_ins_quantity")
    trialCheckInsQuantity Int       @default(0) @map("trial_check_ins_quantity")
    stripeId              String?   @map("stripe_id")
    subscriptionId        String?   @map("subscription_id")
    expirationDate        DateTime? @map("expiration_date")
    updatedAt             DateTime  @updatedAt @map("updated_at")
    createdAt             DateTime  @default(now()) @map("created_at")

    sessions              Session[]
    events                Event[]
    checkIns              CheckIn[]
    payments              Payment[]
    statements            Statement[]
    activateAccountTokens ActivateAccountToken[]
    eventLogs             EventLog[]
    WatchSession          WatchSession[]
    favorites             Favorite[]
    SystemLog             SystemLog[]

    @@map("users")
}

model ActivateAccountToken {
    id          String   @unique @default(cuid())
    userId      String
    alreadyUsed Boolean  @default(false) @map("already_used")
    expiresAt   DateTime @map("expires_at")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("activate_account_tokens")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Event {
    id                  String    @id @default(cuid())
    title               String
    duration            Int
    isLive              Boolean   @map("is_live")
    checkInsMaxQuantity Int?      @map("check_ins_max_quantity")
    startDate           DateTime? @map("start_date")
    recordedUrl         String?   @map("recorded_url")
    liveUrl             String?   @map("live_url")
    createdAt           DateTime  @default(now()) @map("created_at")
    updatedAt           DateTime  @updatedAt @map("updated_at")
    instructorId        String    @map("instructor_id")
    intensity           String?
    isPremium           Boolean   @default(true) @map("is_premium")

    instructor           User                  @relation(fields: [instructorId], references: [id], onDelete: Cascade)
    checkIns             CheckIn[]
    WatchSession         WatchSession[]
    favorites            Favorite[]
    dailyRecommendations DailyRecommendation[]

    @@map("events")
}

model CheckIn {
    id        String       @id @default(cuid())
    userId    String       @map("user_id")
    eventId   String       @map("event_id")
    type      CheckInTypes @default(PAID)
    attended  Boolean?
    createdAt DateTime     @default(now()) @map("created_at")

    user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    event     Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
    Statement Statement[]

    @@unique([userId, eventId])
    @@map("check_ins")
}

model Statement {
    id               String        @id @default(uuid())
    userId           String
    paymentId        String?       @map("payment_id")
    checkInId        String?       @map("check_in_id")
    title            String
    description      String
    type             StatementType
    checkInsQuantity Int           @map("check_ins_quantity")
    checkInType      CheckInTypes  @default(PAID) @map("check_in_type")
    createdAt        DateTime      @default(now())
    updatedAt        DateTime      @updatedAt

    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    payment Payment? @relation(fields: [paymentId], references: [id])
    checkIn CheckIn? @relation(fields: [checkInId], references: [id], onDelete: SetNull)

    @@map("statements")
}

enum StatementType {
    DEBIT
    CREDIT
}

model Payment {
    id         String          @id @default(uuid())
    userId     String
    planId     Int?
    externalId String          @unique
    platform   PaymentPlatform
    method     PaymentMethod
    grossValue Int
    netValue   Int
    fee        Int
    currency   String
    createdAt  DateTime        @default(now())
    updatedAt  DateTime        @default(now()) @updatedAt

    user      User        @relation(fields: [userId], references: [id])
    plan      Plan?       @relation(fields: [planId], references: [id])
    Statement Statement[]

    @@map("payments")
}

enum PaymentMethod {
    PIX
    CREDIT_CARD
}

enum PaymentPlatform {
    STRIPE
    MERCADO_PAGO
}

model Plan {
    id               Int              @id @default(autoincrement())
    checkInsQuantity Int              @map("check_ins_quantity")
    price            Int
    currency         String
    recurrencePeriod RecurrencePeriod @map("recurrence_period")
    isActive         Boolean          @default(true) @map("is_active")
    stripePriceId    String           @map("stripe_price_id")
    createdAt        DateTime         @default(now()) @map("created_at")
    updatedAt        DateTime         @updatedAt @map("updated_at")

    payments Payment[]

    @@map("plans")
}

enum RecurrencePeriod {
    MONTHLY
    QUARTERLY
    YEARLY
}

model EventLog {
    id        String   @id @default(cuid())
    eventType String   @map("event_type")
    userId    String   @map("user_id")
    metadata  Json
    createdAt DateTime @default(now()) @map("created_at")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("event_logs")
}

/// Logs do sistema
model SystemLog {
    /// ID único do log
    id        Int      @id @default(autoincrement())
    /// O log em si, contendo a ação que foi realizada, como 'user-created', 'activation-email-sent', etc
    log       String
    /// Metadados do log, como token gerado, e qualquer informação adicional que seja necessária
    metadata  Json?
    /// ID do usuário associado a essa ação, caso exista
    userId    String?  @map("user_id")
    /// Data de criação do log
    createdAt DateTime @default(now()) @map("created_at")
    users     User?    @relation(fields: [userId], references: [id])

    @@map("system_logs")
}

model WatchSession {
    id            String   @id @default(cuid())
    userId        String   @map("user_id")
    eventId       String   @map("event_id")
    progress      Float    @default(0)
    playedSeconds Int      @default(0) @map("played_seconds")
    createdAt     DateTime @default(now()) @map("created_at")
    updatedAt     DateTime @updatedAt @map("updated_at")

    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
    event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

    @@map("watch_sessions")
}

model Favorite {
    id      String @id @default(cuid())
    userId  String
    eventId String

    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
    event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

    @@unique([userId, eventId])
    @@map("favorites")
}

model DailyRecommendation {
    id        String   @id @default(cuid())
    date      DateTime
    eventId   String
    metadata  Json?
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    event Event @relation(fields: [eventId], references: [id])

    @@index([date])
    @@map("daily_recommendations")
}
